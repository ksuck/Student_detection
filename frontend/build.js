// ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô icon
const backpack = document.getElementById("backpack");
const iconOutline = document.getElementById("icon-outline");
const iconFill = document.getElementById("icon-fill");
const containerInventory = document.querySelector(".container-inventory");

backpack.addEventListener("click", (e) => {
  e.preventDefault();

  // toggle icon
  iconOutline.classList.toggle("active");
  iconFill.classList.toggle("active");

  // toggle container
  containerInventory.classList.toggle("active");
});


/*---------------- API URL-------------------------------- */
const API_URL = ""; 




// ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏°‡∏≤‡πÉ‡∏ä‡πâ
/*------------------------------- CAMERA ----------------------------------- */
const video = document.getElementById('camera');
const logDisplay = document.getElementById("system-log-display");
const toggleCamera = document.getElementById("toggle-camera");


let stream = null; // ‡πÄ‡∏Å‡πá‡∏ö stream ‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á

let countdown = 5;
let countdownId = null;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏° log
function addLog(type, message) {
  const div = document.createElement("div");
  div.classList.add(type); // system-log-info / system-log-suscess
  div.innerHTML = `<b>system</b> <p>${message}</p>`;
  logDisplay.prepend(div);
}

// ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
async function startCamera() {
  try {
    stream = await navigator.mediaDevices.getUserMedia({
      video: { width: 640, height: 480 }
    });
    video.srcObject = stream;
    console.log("üé• ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
    
    startCountdown();  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°
  } catch (err) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á:", err);
  }
}
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
function stopCamera() {
  if (stream) {
    stream.getTracks().forEach(track => track.stop()); 
    video.srcObject = null;
    stream = null;
    console.log("üõë ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß");
  }

  if (countdownId) {       // ‚úÖ ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏ö
    clearInterval(countdownId);
    countdownId = null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô toggle
toggleCamera.addEventListener("change", () => {
  if (toggleCamera.checked) {
    startCamera();
  } else {
    stopCamera();
  }
});
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
function startCountdown() {
  countdown = 5;
  addLog("system-log-info", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á...");
  countdownId = setInterval(() => {
    addLog("system-log-info", `(${countdown})`);
    countdown--;

    if (countdown < 0) {
      clearInterval(countdownId);
      countdownId = null;
      captureAndSend(); // ‡∏¢‡∏¥‡∏á API ‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏±‡∏ö‡∏Ñ‡∏£‡∏ö
    }
  }, 1000);
}

// ‚úÖ ‡∏î‡∏∂‡∏á frame ‡∏à‡∏≤‡∏Å <video> ‡∏™‡πà‡∏á‡πÑ‡∏õ API
async function captureAndSend() {
  if (video.videoWidth === 0 || video.videoHeight === 0) {
    console.warn("‚è≥ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°");
    startCountdown(); // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
    return;
  }

  const canvas = document.createElement("canvas");
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  const ctx = canvas.getContext("2d");
  ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

  const blob = await new Promise(resolve => canvas.toBlob(resolve, "image/jpeg"));
  const formData = new FormData();
  formData.append("file", blob, "frame.jpg");

  try {
    const res = await fetch(`${API_URL}/detect_face`, {
      method: "POST",
      body: formData
    });
    const data = await res.json();

    if (data.found === false) {
      addLog("system-log-info", "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤");
    } else {
      addLog("system-log-suscess", `‚úÖ ‡πÄ‡∏à‡∏≠ ${data.name} (‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à ${data.confidence.toFixed(2)})`);

      // üü¢ toggle sun/moon
      const toggleDayNight = document.getElementById("toggle-day-night");
      const isCheckIn = !toggleDayNight.checked; // ‚òÄÔ∏è sun = check-in, üåô moon = check-out

      // üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
      const today = new Date().toISOString().split("T")[0]; // YYYY-MM-DD
      const now = new Date().toTimeString().split(" ")[0]; // HH:MM:SS

      // üîç ‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
      const studentRes = await fetch(`${API_URL}/students/by-name?full_name=${encodeURIComponent(data.name)}`);
      const student = await studentRes.json();

      if (!student || !student.student_id) {
        addLog("system-log-warnig", `‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ${data.name} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö`);
        return;
      }

      // üîé ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const attRes = await fetch(`${API_URL}/attendance/by-date?student_id=${student.student_id}&date=${today}`);
      const att = await attRes.json();

      if (!att || att.error) {
        // üìå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí add ‡πÉ‡∏´‡∏°‡πà
        if (isCheckIn) {
          await fetch(`${API_URL}/attendance/add?student_id=${student.student_id}&attendance_date=${today}&checkin=${now}&checkout=`, { method: "POST" });
          addLog("system-log-suscess", `üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° Check-in ‡πÄ‡∏ß‡∏•‡∏≤ ${now}`);
        } else {
          await fetch(`${API_URL}/attendance/add?student_id=${student.student_id}&attendance_date=${today}&checkin=&checkout=${now}`, { method: "POST" });
          addLog("system-log-suscess", `üîµ ‡πÄ‡∏û‡∏¥‡πà‡∏° Check-out ‡πÄ‡∏ß‡∏•‡∏≤ ${now}`);
        }
      } else {
        // üìå ‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß ‚Üí update
        if (isCheckIn) {
          if (!att.checkin_time) {
            await fetch(`${API_URL}/attendance/update?student_id=${student.student_id}&attendance_date=${today}&checkin=${now}&checkout=${att.checkout_time || ""}`, { method: "PUT" });
            addLog("system-log-suscess", `üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Check-in ‡πÄ‡∏ß‡∏•‡∏≤ ${now}`);
          } else {
            addLog("system-log-warnig", `‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Check-in ‡πÅ‡∏•‡πâ‡∏ß (${att.checkin_time})`);
          }
        } else {
          if (!att.checkout_time) {
            await fetch(`${API_URL}/attendance/update?student_id=${student.student_id}&attendance_date=${today}&checkin=${att.checkin_time || ""}&checkout=${now}`, { method: "PUT" });
            addLog("system-log-suscess", `üîµ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Check-out ‡πÄ‡∏ß‡∏•‡∏≤ ${now}`);
          } else {
            addLog("system-log-warnig", `‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Check-out ‡πÅ‡∏•‡πâ‡∏ß (${att.checkout_time})`);
          }
        }
      }

      // ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      loadAttendance();
    }
  } catch (err) {
    console.error("API error:", err);
    addLog("system-log-info", "‚ö†Ô∏è API error");
  } finally {
    startCountdown(); // ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
  }
}
/*------------------------------- CAMERA ----------------------------------- */
// ‡∏õ‡∏∏‡πà‡∏° inventory
const buttons = document.querySelectorAll(".inventory-btt a i");
const page1 = document.querySelector(".inventory-page1");
const page2 = document.querySelector(".inventory-page2");

buttons.forEach((btn, index) => {
  btn.addEventListener("click", () => {
    // ‡∏•‡∏ö active ‡∏ó‡∏∏‡∏Å‡∏õ‡∏∏‡πà‡∏°
    buttons.forEach(b => b.classList.remove("active"));
    // set active ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î
    btn.classList.add("active");

    // ‡∏ã‡πà‡∏≠‡∏ô/‡πÇ‡∏ä‡∏ß‡πå‡∏´‡∏ô‡πâ‡∏≤
    if (index === 0) {
      page1.style.display = "block";
      page2.style.display = "none";
    } else if (index === 1) {
      page1.style.display = "none";
      page2.style.display = "block";
    }
  });
});



/*popup*/
/*popup save as student*/
function open_save_as_std(student_id, full_name) {
  document.getElementById("popup-student-id").value = student_id;
  document.getElementById("popup-student-name").value = full_name;

  document.getElementById("popup-edit-std").style.display = "flex";
}
function close_save_as_std() {
  document.getElementById("popup-edit-std").style.display = "none";
}

/*save*/
async function saveStudent() {
  const studentId = document.getElementById("popup-student-id").value;
  const fullName = document.getElementById("popup-student-name").value;

  await fetch(`${API_URL}/students/update?student_id=${studentId}&full_name=${encodeURIComponent(fullName)}`, {
    method: "PUT"
  });

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
  loadStudents();
  close_save_as_std();
}

/*delete*/
async function deleteStudent(studentId) {
  if (!confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

  
    const response = await fetch(`${API_URL}/students/delete/${studentId}`, {
      method: "DELETE"
    });

    loadStudents(); 
    
  
}


/*popup save as check in check out*/
function open_save_as_time(attendance_id) {
  // ‡∏´‡∏≤ row ‡∏ó‡∏µ‡πà‡∏Å‡∏î
  const row = document.getElementById(`attendance-row-${attendance_id}`);
  if (!row) return;

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ <p> ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const cols = row.querySelectorAll("p");
  const attendanceId = cols[0].innerText;
  const studentId = cols[1].innerText;
  const attendanceDate = cols[2].innerText;
  const checkinTime = cols[3].innerText;
  const checkoutTime = cols[4].innerText;

  // ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô popup
  document.getElementById("popup-student-id-time").value = studentId;
  document.getElementById("popup-attendance-date").value = attendanceDate;
  document.getElementById("popup-checkin").value = checkinTime !== "-" ? checkinTime : "";
  document.getElementById("popup-checkout").value = checkoutTime !== "-" ? checkoutTime : "";

  // ‡πÄ‡∏õ‡∏¥‡∏î popup
  document.getElementById("popup-edit-time").style.display = "flex";
}

function close_save_as_time() {
  document.getElementById("popup-edit-time").style.display = "none";
}

async function saveAttendance() {
  const studentId = document.getElementById("popup-student-id-time").value;
  const attendanceDate = document.getElementById("popup-attendance-date").value;
  const checkin = document.getElementById("popup-checkin").value;
  const checkout = document.getElementById("popup-checkout").value;

  
   await fetch(
      `${API_URL}/attendance/update?student_id=${encodeURIComponent(studentId)}&attendance_date=${encodeURIComponent(attendanceDate)}&checkin=${encodeURIComponent(checkin)}&checkout=${encodeURIComponent(checkout)}`,
      { method: "PUT" }
    );

    loadAttendance();
    close_save_as_time();
  
  }

  async function deleteAttendance(attendanceId) {
  if (!confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;

  
    const response = await fetch(`${API_URL}/attendance/delete/${attendanceId}`, {
      method: "DELETE"
    });

    
    
    loadAttendance(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    
  
}

async function deleteAttendance(attendanceId) {
  if (!confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ?")) return;

  
    await fetch(`${API_URL}/attendance/delete/${attendanceId}`, {
      method: "DELETE",
    });
    
    loadAttendance() // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
}


/*popup add student */
function open_add_std() {
  document.getElementById("popup-add-std").style.display = "flex";
}

function close_add_std() {
  document.getElementById("popup-add-std").style.display = "none";
}
/*popup add check in check out */
function open_add_time() {
  document.getElementById("popup-add-time").style.display = "flex";
}

function close_add_time() {
  document.getElementById("popup-add-time").style.display = "none";
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
async function saveNewStudent() {
  const studentId = document.getElementById("add-student-id").value;
  const fullName = document.getElementById("add-student-name").value;

  if (!studentId || !fullName) {
    alert("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    return;
  }

  await fetch(`${API_URL}/students/add?student_id=${encodeURIComponent(studentId)}&full_name=${encodeURIComponent(fullName)}`, {
    method: "POST"
  });

  loadStudents(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  close_add_std(); // ‡∏õ‡∏¥‡∏î popup
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å
async function saveNewAttendance() {
  const studentId = document.getElementById("add-student-id-time").value;
  const attendanceDate = document.getElementById("add-attendance-date").value;
  const checkin = document.getElementById("add-checkin").value;
  const checkout = document.getElementById("add-checkout").value;

  if (!studentId || !attendanceDate || !checkin) {
    alert("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å");
    return;
  }

  await fetch(`${API_URL}/attendance/add?student_id=${encodeURIComponent(studentId)}&attendance_date=${encodeURIComponent(attendanceDate)}&checkin=${encodeURIComponent(checkin)}&checkout=${encodeURIComponent(checkout)}`, {
    method: "POST"
  });

  loadAttendance(); // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
  close_add_time(); // ‡∏õ‡∏¥‡∏î popup
}


/* ‡πÇ‡∏´‡∏•‡∏î Student */
async function loadStudents() {
  try {
    const response = await fetch(`${API_URL}/students`);
    const students = await response.json();

    const tableContainer = document.getElementById("student-container");
    tableContainer.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô

    students.forEach(std => {
      const row = document.createElement("div");
      row.classList.add("table-row");
      row.id = `student-row-${std.student_id}`;  // ‚úÖ id ‡πÄ‡∏â‡∏û‡∏≤‡∏∞

      row.innerHTML = `
        <p>${std.student_id}</p>
        <p>${std.full_name}</p>
        <p>
          <button><span class="material-symbols-outlined">search</span></button>
          <button onclick="open_save_as_std('${std.student_id}', '${std.full_name}')">
            <span class="material-symbols-outlined">save_as</span>
          </button>
          <button onclick="deleteStudent(${std.student_id})">
            <span class="material-symbols-outlined">delete</span>
          </button>
        </p>
      `;

      tableContainer.appendChild(row);
    });
  } catch (err) {
    console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚ùå", err);
  }
}

/*‡πÇ‡∏´‡∏•‡∏î Attendance*/
// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Attendance
async function loadAttendance() {
  try {
    const response = await fetch(`${API_URL}/attendance`);
    const attendanceList = await response.json();

    const container = document.getElementById("attendance");
    container.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô

    attendanceList.forEach(item => {
      const row = document.createElement("div");
      row.classList.add("table-row");
      row.id = `attendance-row-${item.attendance_id}`;

      row.innerHTML = `
        <p>${item.attendance_id}</p>
        <p>${item.student_id}</p>
        <p>${item.attendance_date}</p>
        <p>${item.checkin_time || "-"}</p>
        <p>${item.checkout_time || "-"}</p>
        <p>
          <button onclick="open_save_as_time(${item.attendance_id})">
            <span class="material-symbols-outlined">save_as</span>
          </button>
          <button onclick="deleteAttendance(${item.attendance_id})">
            <span class="material-symbols-outlined">delete</span>
          </button>
        </p>
      `;

      container.appendChild(row);
    });
  } catch (err) {
    console.error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• attendance ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚ùå", err);
  }
}


window.onload = () => {
  loadStudents();    // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  loadAttendance();  // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å
};





